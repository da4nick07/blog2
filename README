Отличия от "типовой":

1. Где index.php? - в папке public

2. Настройки в .htaccess и получение uri.
    1.1 Настройки свои, исторически. И почему-то при использовании "типовых" apache начинает хулиганить.
    1.2 Получение uri из $_SERVER['REQUEST_URI']['path'].

3. Константы и загрузчик классов вынес в /boot/init.php.
    При написании тестов достаточно подключть один файл - и всё работает как надо.

4. Очень не понравилось разбиение на header, main и footer. Сделал по-свему, см. /templates/main/main.php.

5. MVC, View: сделал как функцию и вынес в модуль lib/functions. Заодно можно и вложенные шаблоны использовать.

6. Controllers.
    1. Сделал abstract class BaseController, а ArticlesController и MainController - его наследники.
    2. в class DB:
        function selectClassQuery() - возвращает массив ОБЪЕКТОВ, заданных в $className;
        function execQuery - Одиночный запрос, не требующий fetchAll: insert, update или delete;
        function fetchQuery - Функция должна возвращает массив ЗАПИСЕЙ, результат запроса.

7. В Models/Article.php и Models/User.php названия полей "подравнял" под БД. Использовать _set не хочу категорически.

8. В Models/Article добавил счётчик екземпляров, для наглядности. ))

9. abstract class ActiveRecordEntity  - static::$tableName - свойство наследников, по-моему, так быстрее.

10. Для update и insert сделал у ActiveRecordEntity static updateAr и insertAr. Рефлексия, оно, кончно, хорошо, но больно хлопотно и затратно.
И refreshAr туда же.
В общем, работу с БД переделал "под себя"...

11. Работу с токеном пользователя вынес в lib/functions (оно же нужно всегда). Хотя, для подгрузки нужного функционала использовать статические методы класса - мысль интересная.

12. Поскольку всё делаю на виртуальной машине, подтверждение регистрации по почте пока отложил.

13. Сделал отдельные init_htnl и init_api для работы по http и api соотв-но.